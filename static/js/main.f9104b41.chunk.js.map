{"version":3,"sources":["components/Button.js","components/Cover.js","components/Dice.js","components/Name.js","components/Score.js","components/Player.js","components/Input.js","components/Main.js","components/Help.js","components/Game.js","index.js"],"names":["Button","name","click","cn","disabled","className","onClick","Cover","startGameBtn","optionPage","href","Dice","randomNumStr","rotate","Name","Score","scoreType","onChange","Player","score","tempScore","isActive","handleScoreChange","totalWin","Input","handleChange","userRangeValue","err","min","max","type","value","Main","props","randomNumber","Math","floor","random","handleRollDice","state","scoreToWin","player1","player2","dice1","dice2","console","log","resetTemp","setState","diceIsRoll","DiceAnimationActive","total","scoreChange","isPlaying","saveTempScore","handleSaveScore","errMsg","handleUserChangeBtn","e","parseInt","target","isWin","handleNewGameClick","diceName","this","backBtn","Component","Help","optionBtnClick","Game","isCoverPage","isOptionPage","isMainPage","handleStartGameBtn","handleOptionPage","handleOptionBtnClick","backToHomePageBtn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9104b41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({name, click,cn,disabled}) => {\r\n    return (\r\n        <button \r\n            className={`${cn || ''} ${disabled ? 'disabled' : ''}`} \r\n            disabled={disabled}\r\n            onClick={click}>\r\n            \r\n        {name}</button>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Cover = ({startGameBtn,optionPage}) => {\r\n    return (\r\n        <div className=\"flex-col cover\">\r\n            <div className=\"wellcome-msg\">\r\n                <h1 >\r\n                    <span>wellcome to</span> <a href=\"/\">Roll-it</a> Dice Game\r\n                </h1>\r\n            </div>\r\n            <Button name=\"start game\" click={startGameBtn} cn={'start-game-btn'}/>\r\n            <Button name=\"Help\" click={optionPage} cn={'help-btn'}/>\r\n            <footer>made with <span className=\"red\">&#10084;</span> by <a href=\"https://github.com/gurelbs\">Gurel ben Shabat</a></footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cover;\r\n","import React from 'react';\r\nimport './game.css'\r\nconst Dice = ({randomNumStr,rotate}) => {\r\n    return (\r\n        <div className='dice-wrap'>\r\n            <i className={`fas fa-dice-${randomNumStr} ${rotate}`}></i>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Dice;\r\n","import React from 'react';\r\nimport './player-container.css'\r\n\r\nconst Name = ({name,cn}) => {\r\n    return (\r\n        <div className={`player-name ${cn}`}>{name}</div>\r\n    );\r\n}\r\n\r\nexport default Name;\r\n","import React from 'react';\r\nimport './player-container.css'\r\n\r\nconst Score = ({scoreType, cn, onChange}) => {\r\n    return (\r\n        <div className={`player-score`}>\r\n            <p \r\n                onChange={onChange}\r\n                className={cn}>{scoreType || 0}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport Name from './Name'\r\nimport Score from './Score'\r\nimport './game.css'\r\nimport './player-container.css'\r\nconst Player = ({score,tempScore,name,isActive,handleScoreChange,totalWin}) => {\r\n    return (\r\n        <div className={`player-container`}>\r\n            <p className=\"totalWin\">total winning: <span className=\"totalWin-color\">{totalWin || 0}</span></p>\r\n            <Name name={name} cn={isActive && 'active'}/>\r\n            <div className=\"score-wrap\">\r\n                <div className={\"total-score\"}>\r\n                    <Score scoreType={score} onChange={handleScoreChange}/>\r\n                    <i className={`fab fa-bitcoin ${isActive && 'spin'}`}></i>\r\n                </div>\r\n            </div>\r\n            <div className={`temp-score-wrap ${isActive ? 'temp-score-anima' : ''}`}>\r\n                <div className=\"dollar-icon-wrap\">\r\n                    \r\n                <Score scoreType={tempScore} isActive={isActive} cn={'current-score'}/> \r\n                    <i className=\"fas fa-dollar-sign\"></i>            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react';\r\n\r\nconst Input = ({handleChange, userRangeValue, err,min,max}) => {\r\n    return (\r\n        <div className=\"input-wrap\">\r\n                <p \r\n                    className=\"input-txt\">{err || 'score to win: '} \r\n            <input \r\n                className=\"user-limit\"\r\n                name=\"user-limit\" \r\n                type=\"range\"   \r\n                min={min}\r\n                max={max}\r\n                value={userRangeValue}\r\n                onChange={handleChange}\r\n                />\r\n                    <span className=\"user-range-txt\">{userRangeValue}</span>\r\n                </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport Dice from './Dice'\r\nimport Button from './Button'\r\nimport Player from './Player';\r\nimport Input from './Input';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            diceIsRoll: false,\r\n            diceName: ['one','two','three','four','five','six'],\r\n            scoreToWin: 100,\r\n            player1: {\r\n                tempScore: 0,\r\n                score: 0,\r\n                isPlaying: false,\r\n                isWin: false,\r\n                totalWin: 0,\r\n            },\r\n            player2: {\r\n                tempScore: 0,\r\n                score: 0,\r\n                isPlaying: false,\r\n                isWin: false,\r\n                totalWin: 0,\r\n            },\r\n            disabled: false\r\n        }\r\n    }\r\n    randomNumber = () => Math.floor(Math.random() * 6) + 1;\r\n    handleRollDice = () => {\r\n        let {scoreToWin,player1,player2} = this.state \r\n        let dice1 = this.randomNumber()\r\n        let dice2 = this.randomNumber()\r\n        console.log(dice1,dice2,scoreToWin);\r\n        if (dice1 === 6 && dice2 === 6){\r\n            this.resetTemp()\r\n        } else {\r\n            this.setState({\r\n                diceIsRoll: true,\r\n                DiceAnimationActive: true,\r\n                dice1: dice1,\r\n                dice2: dice2,\r\n                total: dice1 + dice2,\r\n            })\r\n        }\r\n        if (!player1.score < scoreToWin || !player2.score < scoreToWin) {\r\n            this.scoreChange()\r\n        }\r\n        if (!player1.isPlaying && !player2.isPlaying){\r\n            // start point - player 1 should start\r\n            this.setState( state => ({\r\n                ...state,\r\n                diceIsRoll: true,\r\n                player1 : {\r\n                    ...state.player1,\r\n                    isPlaying: !state.isPlaying,\r\n                    tempScore: state.player1.tempScore + state.total\r\n                }\r\n            }))\r\n        }\r\n        this.saveTempScore()\r\n    }\r\n    saveTempScore = () => {\r\n        let {player1,player2} = this.state\r\n        if (player1.isPlaying){\r\n            this.setState(state => ({\r\n                player1: {\r\n                    ...state.player1,\r\n                    tempScore: state.player1.tempScore + state.total\r\n                },\r\n            }))\r\n        } \r\n        if (player2.isPlaying){\r\n            this.setState(state => ({\r\n                player2: {\r\n                    ...state.player2,\r\n                    tempScore: state.player2.tempScore + state.total\r\n                },\r\n            }))\r\n        } \r\n    }\r\n    resetTemp = () =>{\r\n        let {player1,player2} = this.state\r\n        if (player1.isPlaying || player2.isPlaying){\r\n            this.setState(state => ({\r\n                ...state,\r\n                diceIsRoll: false,\r\n                dice1: 0,\r\n                dice2: 0,\r\n                total: 0,\r\n                player1: { \r\n                    ...state.player1,\r\n                    isPlaying:  !state.player1.isPlaying,\r\n                    tempScore: 0,\r\n                    totalWin: state.player1.totalWin\r\n                    \r\n                },\r\n                player2: { \r\n                    ...state.player2,\r\n                    isPlaying:  !state.player2.isPlaying,\r\n                    totalWin: state.player2.totalWin,\r\n                    tempScore: 0, \r\n                },\r\n            }))\r\n\r\n        }\r\n    }\r\n    handleSaveScore = () => {\r\n        this.scoreChange()\r\n        let  {player1,player2} = this.state\r\n        if (player1.isPlaying){\r\n            this.setState(state => ({\r\n                player1: {\r\n                    ...state.player1,\r\n                    score: state.player1.score + state.player1.tempScore,\r\n                    tempScore: 0, \r\n                    isPlaying: !state.player1.isPlaying,\r\n                },\r\n                player2: {\r\n                    ...state.player2,\r\n                    isPlaying: !state.player2.isPlaying,\r\n                }\r\n            }))\r\n        }\r\n        if (player2.isPlaying){\r\n            this.setState(state => ({\r\n                player2: {\r\n                    ...state.player2,\r\n                    score: state.player2.score + state.player2.tempScore,\r\n                    tempScore: 0, \r\n                    isPlaying: !state.player2.isPlaying,\r\n\r\n                },\r\n                player1: {\r\n                    ...state.player1,\r\n                    isPlaying: !state.player1.isPlaying\r\n                }\r\n            }))\r\n        }\r\n\r\n    }\r\n    rotate = () => {\r\n        const {player1} = this.state\r\n        return player1.isPlaying ? 'rotate-right' : 'rotate-left'\r\n    }\r\n    errMsg = () => {\r\n        return (\r\n            <dive className=\"loose-msg\">\r\n                <p>\r\n                {!this.state.player1.isPlaying ? 'PLAYER 1' : 'PLAYER 2'} LOSE HIS TURN\r\n                </p> \r\n            </dive>\r\n        )\r\n    }\r\n    handleUserChangeBtn = (e) => {\r\n        this.setState(state => ({\r\n            ...state,\r\n            scoreToWin: parseInt(e.target.value)\r\n        }))\r\n    }\r\n    scoreChange = () => {\r\n        let {player1, player2, scoreToWin} = this.state;\r\n        if (player1.score >= scoreToWin){\r\n            this.setState(state => ({\r\n                ...state, \r\n                player1: {\r\n                    ...player1, \r\n                    isWin: true,\r\n                    totalWin: state.player1.totalWin + 1\r\n\r\n                },\r\n                player2: {\r\n                    ...player2, \r\n                },\r\n                disabled: true\r\n            }))\r\n        } else if (player2.score >= scoreToWin){\r\n            this.setState(state => ({\r\n                ...state, \r\n                player2: {\r\n                    ...player2, \r\n                    isWin: true,\r\n                    totalWin: state.player2.totalWin + 1\r\n\r\n                },\r\n                player1: {\r\n                    ...player1, \r\n                },\r\n                disabled: true\r\n            }))\r\n        }\r\n    }\r\n    handleNewGameClick = () => {\r\n        this.setState(state => ({\r\n            ...state,\r\n            diceIsRoll: false,\r\n            scoreToWin: 100,\r\n            player1: {\r\n                totalWin: state.player1.totalWin, \r\n                tempScore: 0,\r\n                score: 0,\r\n                isPlaying: false,\r\n                isWin: false,\r\n                \r\n            },\r\n            player2: {\r\n                totalWin: state.player2.totalWin, \r\n                tempScore: 0,\r\n                score: 0,\r\n                isPlaying: false,\r\n                isWin: false,\r\n            },\r\n            disabled: false\r\n        }))\r\n    }\r\n    render(){\r\n        const {\r\n            diceIsRoll,diceName,dice1,dice2,DiceAnimationActive,\r\n            player1,player2,\r\n            scoreToWin,disabled,\r\n        } = this.state\r\n\r\n        return (\r\n            <div className=\"main-page\">\r\n                <div className='players-wrap'>\r\n                {<div>1</div> &&\r\n                (!player2.isWin) ?\r\n                    <Player \r\n                        totalWin={player1.totalWin}\r\n                        name='player 1'\r\n                        score={player1.score} \r\n                        tempScore={player1.tempScore} \r\n                        isActive={player1.isPlaying} \r\n                        handleScoreChange={this.handleSaveScore}\r\n                        />\r\n                        : <div className=\"winner-msg\">player 2 win!</div> \r\n                }\r\n                    {\r\n                        <div className=\"dices_and_control_btns\">\r\n                        {\r\n                            diceIsRoll ? <div className=\"dices-container \">\r\n                            <Dice \r\n                                randomNumStr={diceName[dice1-1]} \r\n                                isActive={DiceAnimationActive}\r\n                                rotate={this.rotate()}/>\r\n                            <Dice \r\n                                randomNumStr={diceName[dice2-1]} \r\n                                isActive={DiceAnimationActive}\r\n                                rotate={this.rotate()}/>\r\n                        </div> \r\n                        : player1.isPlaying || player2.isPlaying \r\n                        ?  this.errMsg() \r\n                        : ''\r\n                        \r\n                    }\r\n                        <div className=\"control-btns-wrap\">\r\n                            <Button \r\n                                name='roll'\r\n                                cn={'roll-btn'} \r\n                                click={this.handleRollDice}\r\n                                disabled={disabled}\r\n                                />\r\n                            <Button \r\n                                name='hold' \r\n                                cn={'hold-btn'} \r\n                                disabled={disabled}\r\n                                click={this.handleSaveScore}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                    {(!player1.isWin) ?\r\n                    <Player \r\n                        name='player 2'\r\n                        totalWin={player2.totalWin}\r\n                        score={player2.score} \r\n                        tempScore={player2.tempScore} \r\n                        isActive={player2.isPlaying} \r\n                        handleScoreChange={this.handleSaveScore}\r\n                        /> \r\n                    : <div className=\"winner-msg\">player 1 Win!</div>}\r\n                </div> \r\n                \r\n                <div className=\"bottom-control-btn\">\r\n                    <Button name='new game' cn={'new-game'} click={this.handleNewGameClick}/>\r\n                    <Input\r\n                        min={2}\r\n                        max={1000}\r\n                        userRangeValue={scoreToWin}\r\n                        handleChange={this.handleUserChangeBtn}\r\n                    />\r\n                    <Button name='homepage' click={this.props.backBtn}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport './setting-page.css'\r\nconst Help = ({optionBtnClick}) => {\r\n    return (\r\n        <div className=\"help-page\">\r\n            <div className=\"help-wrap\">\r\n                <h1>hey!</h1>\r\n                <h4>wellcome to rollit game.</h4>\r\n                <p>it's a simple <a href=\"https://en.wikipedia.org/wiki/Pig_(dice_game)\" target=\"_blink\">dice game</a>.<br></br> \r\n                in our version you heve 2 dice and  6 is bad: a roll of 6 is treated as a roll of 1.</p>\r\n                <Button name='go back' click={optionBtnClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React,{ Component } from 'react';\nimport './game.css';\nimport Cover from './Cover'\nimport Main from './Main';\nimport Help from './Help'\nexport default class Game extends Component {\n  state = { \n    isCoverPage: true,\n    isOptionPage: false,\n    isMainPage: false\n  }\n  handleStartGameBtn = () => {\n    this.setState({\n      isCoverPage: false,\n      isMainPage: true\n    })\n  }\n  handleOptionPage = () => {\n    this.setState({\n      isCoverPage: false,\n      isOptionPage: true,\n    })\n  }\n  handleOptionBtnClick = () => {\n    this.setState({\n      isCoverPage: true,\n      isOptionPage: false,\n    }) \n  }\n  backToHomePageBtn = () => {\n    this.setState({\n      isCoverPage: true,\n      isOptionPage: false,\n      isMainPage: false\n    }) \n  }\n  render(){\n    const {isCoverPage,isOptionPage} = this.state\n    return (\n      <div className=\"game-wrap\">\n        {\n        isCoverPage && !isOptionPage\n        ? <Cover \n          startGameBtn={this.handleStartGameBtn}\n          optionPage={this.handleOptionPage}\n          />\n        : \n        isOptionPage && !isCoverPage \n        ? <Help optionBtnClick={this.handleOptionBtnClick}/> \n        :\n        <Main backBtn={this.backToHomePageBtn}/>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}